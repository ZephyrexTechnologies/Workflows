name: Reusable Discord Alert

on:
  workflow_call:
    inputs:
      message_body:
        description: "The main message content to send. Supports markdown and newlines."
        required: true
        type: string
      ping_user_ids:
        description: "Comma-separated list of user keys (e.g., GitHub usernames) to ping. These keys will be looked up in the DISCORD_USER_MAP secret to find Discord User IDs."
        required: false
        type: string
        default: ""
      artifact_paths:
        description: "Comma-separated list of paths (relative to GITHUB_WORKSPACE) to image/video artifacts to upload (e.g., 'reports/image.png,output/video.mp4')."
        required: false
        type: string
        default: ""
      should_notify:
        description: "Boolean flag indicating whether notification should be sent."
        required: false
        type: string
        default: "true"
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
    secrets:
      DISCORD_WEBHOOK_URL:
        description: "The Discord Webhook URL."
        required: true
      DISCORD_USER_MAP:
        description: 'JSON string mapping user keys to Discord User IDs. E.g., ''{"gh_user":"discord_id","another_user":"id"}'''
        required: false

jobs:
  send-discord-alert:
    runs-on: ${{ inputs.runs_on }}
    name: Send Alert to Discord
    steps:
      # This step assumes artifacts are already in the workspace (e.g., from a previous job or checked out code).
      # If artifacts were created by actions/upload-artifact, they would need to be downloaded first by the calling workflow
      # or this workflow would need a download step if it were to receive artifact names instead of paths.

      - name: Check webhook availability
        id: check-webhook
        run: |
          # Simple check for webhook URL before attempting to send
          if [ -n "${{ secrets.DISCORD_WEBHOOK_URL }}" ]; then
            echo "Discord webhook URL is set and will be used."
            echo "webhook_present=true" >> $GITHUB_OUTPUT
          else
            echo "::warning::DISCORD_WEBHOOK_URL is not set or is empty. Notification will be skipped. Please ensure the secret is configured in repository/organization settings and correctly passed to this workflow."
            echo "webhook_present=false" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord Notification
        if: inputs.should_notify == 'true' && steps.check-webhook.outputs.webhook_present == 'true'
        env:
          # Secrets and inputs are passed as environment variables for safer handling in script
          WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MESSAGE_BODY_INPUT: ${{ inputs.message_body }}
          PING_USER_IDS_INPUT: ${{ inputs.ping_user_ids }}
          DISCORD_USER_MAP_SECRET: ${{ secrets.DISCORD_USER_MAP }}
          ARTIFACT_PATHS_INPUT: ${{ inputs.artifact_paths }}
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.
          set -x # Print each command before execution for robust debugging

          echo "--- RAW MESSAGE_BODY_INPUT --- "
          echo "$MESSAGE_BODY_INPUT"
          echo "--- RAW MESSAGE_BODY_INPUT (with cat -A) --- "
          echo "$MESSAGE_BODY_INPUT" | cat -A
          echo "--- END RAW MESSAGE_BODY_INPUT ---"

          if [ -z "$WEBHOOK_URL" ]; then
            echo "::error::DISCORD_WEBHOOK_URL secret is not set or empty."
            exit 1
          fi

          # MESSAGE_BODY_INPUT is now expected to contain literal \n where newlines are desired.
          # The main processing is to ensure backslashes and quotes are escaped for JSON.
          PROCESSED_MESSAGE_BODY="$MESSAGE_BODY_INPUT"

          echo "--- PROCESSED_MESSAGE_BODY (now same as input) --- "
          echo "$PROCESSED_MESSAGE_BODY"
          echo "--- PROCESSED_MESSAGE_BODY (with cat -A) --- "
          echo "$PROCESSED_MESSAGE_BODY" | cat -A
          echo "--- END PROCESSED_MESSAGE_BODY ---"

          # 1. Construct user pings prefix based on DISCORD_USER_MAP and PING_USER_IDS_INPUT
          PINGS_PREFIX=""
          if [ -n "$PING_USER_IDS_INPUT" ] && [ -n "$DISCORD_USER_MAP_SECRET" ] && command -v jq &> /dev/null; then
            echo "Debug: PING_USER_IDS_INPUT = '$PING_USER_IDS_INPUT'"
            echo "Debug: DISCORD_USER_MAP_SECRET = '$DISCORD_USER_MAP_SECRET'"
            echo "Debug: Checking if DISCORD_USER_MAP_SECRET is valid JSON..."
            if ! echo "$DISCORD_USER_MAP_SECRET" | jq empty > /dev/null 2>&1; then
              echo "::warning::DISCORD_USER_MAP secret is not valid JSON. Skipping pings based on user keys."
            else
              echo "Debug: DISCORD_USER_MAP is valid JSON."
              FORMATTED_USER_KEYS=$(echo "$PING_USER_IDS_INPUT" | sed 's/,/ /g')
              for user_key in $FORMATTED_USER_KEYS; do
                trimmed_user_key=$(echo "$user_key" | xargs) # Trim whitespace
                echo "Debug: Processing trimmed_user_key for ping = '$trimmed_user_key'"
                if [ -n "$trimmed_user_key" ]; then
                  discord_user_id=$(echo "$DISCORD_USER_MAP_SECRET" | jq -r --arg K "$trimmed_user_key" '.[$K]')
                  echo "Debug: For key '$trimmed_user_key', got discord_user_id = '$discord_user_id'"
                  if [ -n "$discord_user_id" ] && [ "$discord_user_id" != "null" ]; then
                    PINGS_PREFIX="${PINGS_PREFIX}<@${discord_user_id}> "
                    echo "Debug: Added ping for $trimmed_user_key. PINGS_PREFIX = '$PINGS_PREFIX'"
                  else
                    echo "::warning::User key '$trimmed_user_key' not found in DISCORD_USER_MAP or has a null value. Skipping ping for this user."
                  fi
                fi
              done
            fi
          elif [ -n "$PING_USER_IDS_INPUT" ] && [ -z "$DISCORD_USER_MAP_SECRET" ]; then
            echo "Debug: PING_USER_IDS_INPUT is present, but DISCORD_USER_MAP_SECRET is empty. Cannot map keys to IDs."
            echo "::warning::'ping_user_ids' were provided, but the 'DISCORD_USER_MAP' secret is missing. Cannot process pings."
          elif [ -n "$PING_USER_IDS_INPUT" ] && ! command -v jq &> /dev/null; then
            echo "Debug: PING_USER_IDS_INPUT is present, but jq command is not available."
            echo "::warning::'ping_user_ids' were provided, but 'jq' is not available to parse 'DISCORD_USER_MAP'. Pings will be skipped."
          fi

          CONTENT_TO_SEND="${PINGS_PREFIX}${PROCESSED_MESSAGE_BODY}"
          echo "--- CONTENT_TO_SEND (pings + processed_message_body) --- "
          echo "$CONTENT_TO_SEND"
          echo "--- END CONTENT_TO_SEND ---"

          # JSON Escaping and Construction using jq:
          # The CONTENT_TO_SEND variable should have actual newlines where desired.
          # jq will handle converting them to \n and other necessary JSON string escaping.
          JSON_PAYLOAD_PART=$(jq -nc --arg content "$CONTENT_TO_SEND" '{content: $content}')

          echo "--- JSON_PAYLOAD_PART (from jq) --- "
          echo "$JSON_PAYLOAD_PART"
          echo "--- END JSON_PAYLOAD_PART ---"

          # 3. Prepare curl arguments array
          CURL_ARGS=("-sS" "-X" "POST") # -sS for silent operation but show errors

          # 5. Check for artifacts and build form data if needed
          VALID_ARTIFACT_FILES=()
          if [ -n "$ARTIFACT_PATHS_INPUT" ]; then
            IFS=',' read -ra ALL_ARTIFACT_PATHS_ARRAY <<< "$ARTIFACT_PATHS_INPUT"
            for artifact_path_item in "${ALL_ARTIFACT_PATHS_ARRAY[@]}"; do
              trimmed_path_item=$(echo "$artifact_path_item" | xargs) # Trim whitespace from path
              if [ -f "$trimmed_path_item" ]; then
                VALID_ARTIFACT_FILES+=("$trimmed_path_item")
              else
                echo "::warning::Artifact file not found or is not a regular file, skipping: '$trimmed_path_item'"
              fi
            done
          fi

          if [ ${#VALID_ARTIFACT_FILES[@]} -gt 0 ]; then
            echo "::debug::Preparing multipart/form-data request with ${#VALID_ARTIFACT_FILES[@]} artifact(s)."
            # For multipart/form-data, the JSON payload goes into a field named 'payload_json'
            CURL_ARGS+=("-F" "payload_json=$JSON_PAYLOAD_PART")
            FILE_INDEX=0
            for valid_file_path_item in "${VALID_ARTIFACT_FILES[@]}"; do
              FILE_INDEX=$((FILE_INDEX + 1))
              CURL_ARGS+=("-F" "file${FILE_INDEX}=@${valid_file_path_item}")
              echo "::debug::Attaching artifact: '$valid_file_path_item' as file${FILE_INDEX}"
            done
          else
            echo "::debug::Preparing application/json request (no valid artifacts)."
            # For simple message without files, use Content-Type: application/json and -d for data
            CURL_ARGS+=("-H" "Content-Type: application/json")
            CURL_ARGS+=("-d" "$JSON_PAYLOAD_PART")
          fi

          # Add the Webhook URL as the last argument
          CURL_ARGS+=("$WEBHOOK_URL")

          # 6. Execute curl and check HTTP response code
          echo "::debug::Sending notification to Discord..."
          # Create a temporary file for the response body
          RESPONSE_BODY_FILE=$(mktemp)

          # The -w flag writes out the HTTP status code, -o discards the response body from stdout unless redirected
          HTTP_RESPONSE_CODE=$(curl --write-out "%{http_code}" -o "$RESPONSE_BODY_FILE" "${CURL_ARGS[@]}")

          if [ "$HTTP_RESPONSE_CODE" -ge 200 ] && [ "$HTTP_RESPONSE_CODE" -lt 300 ]; then
            echo "Notification sent successfully to Discord (HTTP $HTTP_RESPONSE_CODE)."
          else
            echo "::error::Failed to send Discord notification. HTTP Status Code: $HTTP_RESPONSE_CODE."
            echo "::error::Response Body from Discord:"
            cat "$RESPONSE_BODY_FILE"
            echo "--- CURL ARGS (Webhook URL Redacted) ---"
            TEMP_CURL_ARGS=("${CURL_ARGS[@]}")
            if [ ${#TEMP_CURL_ARGS[@]} -gt 0 ]; then
              unset TEMP_CURL_ARGS[-1] # Remove webhook URL from the temporary copy
              echo "$(printf \"'%s' \" \"${TEMP_CURL_ARGS[@]}\")"
            fi
            echo "--- END CURL ARGS ---"
            exit 1
          fi
          # Clean up temp file
          rm -f "$RESPONSE_BODY_FILE"
