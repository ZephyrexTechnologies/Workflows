name: Submodule Management
on:
  workflow_call:
    inputs:
      file_paths:
        description: "List of relative file paths to synchronize with submodules"
        required: true
        type: string
      ignore_submodules:
        description: "Comma-separated list of submodules to ignore"
        required: false
        type: string
        default: ""
      commit_message:
        description: "Custom commit message for submodule changes"
        required: false
        type: string
        default: "sync: update files from main repository"
      runs_on:
        required: false
        type: string
        default: "ubuntu-latest"
jobs:
  manage-submodules:
    runs-on: ubuntu-22.04
    name: Manage Submodules
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ github.token }}
          fetch-depth: 0
          submodules: recursive

      - name: Get current branch
        id: get-branch
        run: |
          BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config --global user.name "actions-user"
          git config --global user.email "actions-user@users.noreply.github.com"

      - name: Manage submodules on main branch
        if: steps.get-branch.outputs.branch == 'main'
        run: |
          # Get list of submodules
          git submodule foreach --quiet 'echo $name' > submodules.txt

          # Convert ignore submodules to array
          IFS=',' read -ra IGNORE_SUBMODULES <<< "${{ inputs.ignore_submodules }}"

          while IFS= read -r submodule; do
            # Check if submodule should be ignored
            SKIP=false
            for ignore in "${IGNORE_SUBMODULES[@]}"; do
              ignore=$(echo "$ignore" | xargs)
              if [ "$ignore" == "$submodule" ]; then
                echo "Skipping ignored submodule: $submodule"
                SKIP=true
                break
              fi
            done
            
            if [ "$SKIP" = true ]; then
              continue
            fi
            
            echo "Managing submodule: $submodule"
            
            # Navigate to submodule
            cd "$submodule"
            
            # Check if current branch is main, if not switch to main
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            if [ "$CURRENT_BRANCH" != "main" ]; then
              git checkout main
            fi
            
            # Update submodule to latest main
            git pull origin main
            
            # Return to root
            cd $GITHUB_WORKSPACE
          done < submodules.txt

      - name: Manage submodules on non-main branch
        if: steps.get-branch.outputs.branch != 'main'
        run: |
          # Get list of submodules
          git submodule foreach --quiet 'echo $name' > submodules.txt

          # Convert input file paths to array
          IFS=',' read -ra FILE_PATHS <<< "${{ inputs.file_paths }}"

          # Convert ignore submodules to array
          IFS=',' read -ra IGNORE_SUBMODULES <<< "${{ inputs.ignore_submodules }}"

          while IFS= read -r submodule; do
            # Check if submodule should be ignored
            SKIP=false
            for ignore in "${IGNORE_SUBMODULES[@]}"; do
              ignore=$(echo "$ignore" | xargs)
              if [ "$ignore" == "$submodule" ]; then
                echo "Skipping ignored submodule: $submodule"
                SKIP=true
                break
              fi
            done
            
            if [ "$SKIP" = true ]; then
              continue
            fi
            
            echo "Managing submodule: $submodule"
            
            # Navigate to submodule
            cd "$submodule"
            
            # Check if dev branch exists, create if not
            if ! git show-ref --verify --quiet refs/heads/dev; then
              # Check if origin has dev branch
              if git ls-remote --exit-code --heads origin dev; then
                git checkout dev
              else
                # Create dev branch based on main
                git checkout -b dev
              fi
            else
              # Switch to dev branch
              git checkout dev
            fi
            
            # Check and update each file
            CHANGES_MADE=false
            for file_path in "${FILE_PATHS[@]}"; do
              # Trim whitespace
              file_path=$(echo "$file_path" | xargs)
              
              if [ -f "$GITHUB_WORKSPACE/$file_path" ] && [ -f "$file_path" ]; then
                # Compare files
                if ! cmp -s "$GITHUB_WORKSPACE/$file_path" "$file_path"; then
                  echo "Updating $file_path in $submodule"
                  mkdir -p $(dirname "$file_path")
                  cp "$GITHUB_WORKSPACE/$file_path" "$file_path"
                  CHANGES_MADE=true
                fi
              fi
            done
            
            # Commit and push changes if any
            if [ "$CHANGES_MADE" = true ]; then
              git add -A
              git commit -m "${{ inputs.commit_message }}"
              git push origin dev
            fi
            
            # Return to root
            cd $GITHUB_WORKSPACE
          done < submodules.txt

      - name: Ensure submodules point to correct branches
        run: |
          TARGET_BRANCH=${{ steps.get-branch.outputs.branch == 'main' && 'main' || 'dev' }}

          # Get list of submodules
          git submodule foreach --quiet 'echo $name' > submodules.txt

          # Convert ignore submodules to array
          IFS=',' read -ra IGNORE_SUBMODULES <<< "${{ inputs.ignore_submodules }}"

          SUBMODULE_CONFIG_CHANGED=false
          while IFS= read -r submodule; do
            # Check if submodule should be ignored
            SKIP=false
            for ignore in "${IGNORE_SUBMODULES[@]}"; do
              ignore=$(echo "$ignore" | xargs)
              if [ "$ignore" == "$submodule" ]; then
                echo "Skipping ignored submodule for .gitmodules update: $submodule"
                SKIP=true
                break
              fi
            done
            
            if [ "$SKIP" = true ]; then
              continue
            fi
            
            # Get current branch setting in .gitmodules for this submodule
            CURRENT_CONFIG_BRANCH=$(git config -f .gitmodules submodule.$submodule.branch || echo "")

            if [ "$CURRENT_CONFIG_BRANCH" != "$TARGET_BRANCH" ]; then
              echo "Updating .gitmodules for submodule '$submodule' to track branch '$TARGET_BRANCH' (was '$CURRENT_CONFIG_BRANCH')"
              git config -f .gitmodules submodule.$submodule.branch $TARGET_BRANCH
              SUBMODULE_CONFIG_CHANGED=true
            else
              echo "Submodule '$submodule' in .gitmodules already configured to track branch '$TARGET_BRANCH'"
            fi
          done < submodules.txt

          # Commit the .gitmodules changes if any actual changes were made by git config
          if [ "$SUBMODULE_CONFIG_CHANGED" = true ]; then
            # Check if git status shows .gitmodules as modified
            if git diff --quiet .gitmodules; then
              echo ".gitmodules was updated by \`git config\` but \`git diff\` shows no changes. This is unexpected. Skipping commit."
            else
              echo ".gitmodules was modified, committing changes to point submodules to $TARGET_BRANCH branch..."
              git add .gitmodules
              git commit -m "chore: update submodules to track $TARGET_BRANCH branch"
              git push
            fi
          else
            echo "No changes required for .gitmodules configuration."
          fi
